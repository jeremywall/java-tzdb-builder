name: Build Latest TZDB

on:
  workflow_dispatch:
  push:
    branches:
      - main
#  schedule:
#    - cron: '0 0 * * *'

# $JAVA_HOME/lib/tzdb.dat

jobs:
  check:
    name: Check if newer version available
    runs-on: ubuntu-latest
    outputs:
      build_required: ${{steps.build_required.outputs.required}}
      latest_iana_version: ${{steps.versions.outputs.latest_iana_version}}
      last_processed_version: ${{steps.versions.outputs.last_processed_version}}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Fetch latest version file from IANA
        run: wget https://data.iana.org/time-zones/tzdb/version
      - name: Determine versions
        id: versions
        run: |
          LATEST_IANA_VERSION=`cat version | sed 's/ *//g'`
          echo "::set-output name=latest_iana_version::$LATEST_IANA_VERSION"
          LAST_PROCESSED_VERSION=`cat last-processed-version | sed 's/ *//g'`
          echo "::set-output name=last_processed_version::$LAST_PROCESSED_VERSION"
      - run: echo Latest IANA version [${{steps.versions.outputs.latest_iana_version}}] and Last processed version [${{steps.versions.outputs.last_processed_version}}]
      - name: Check if a build is required
        id: build_required
        run: |
          if [ "${{steps.versions.outputs.latest_iana_version}}" != "${{steps.versions.outputs.last_processed_version}}" ]; then
            echo "::set-output name=required::true"
          else
            echo "::set-output name=required::false"
          fi
  build:
    name: Build
    runs-on: ubuntu-latest
    needs: check
    if: needs.check.outputs.build_required == 'true'
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - run: |
          mkdir temp
          cd temp
          wget https://data.iana.org/time-zones/releases/tzcode${{needs.check.outputs.latest_iana_version}}.tar.gz
          wget https://data.iana.org/time-zones/releases/tzdata${{needs.checkutputs.latest_iana_version}}.tar.gz
          tar xzfv tzcode${{needs.check.outputs.latest_iana_version}}.tar.gz
          tar xzfv tzdata${{needs.check.outputs.latest_iana_version}}.tar.gz
          make rearguard_tarballs
          cp "tzdata${{needs.check.outputs.latest_iana_version}}-rearguard.tar.gz" ..
      - run: pwd
      - run: ls -la
      - run: echo $JAVA_HOME
      - run: ls -la $JAVA_HOME/lib/tzdb.dat
      - run: head -c 20 $JAVA_HOME/lib/tzdb.dat
      - run: sudo java -jar ziupdater/ziupdater.jar -l file://`pwd`/tzdata${{needs.check.outputs.latest_iana_version}}-rearguard.tar.gz
      - run: ls -la $JAVA_HOME/lib/tzdb.dat
      - run: sudo chmod 777 $JAVA_HOME/lib/tzdb.dat
      - run: ls -la $JAVA_HOME/lib/tzdb.dat
      - run: head -c 20 $JAVA_HOME/lib/tzdb.dat
      


#      - run: which java
#      - run: which javac
#      - run: java -version
#      - run: javac -version
#      - run: head $JAVA_HOME/lib/tzdb.dat
#      - run: wget -O- https://apt.corretto.aws/corretto.key | sudo apt-key add - 
#      - run: sudo add-apt-repository 'deb https://apt.corretto.aws stable main'
#      - run: sudo apt-get update
#      - run: sudo apt-get install -y java-17-amazon-corretto-jdk
#      - run: ls -la /usr/lib/jvm/java-17-amazon-corretto
#      - run: sudo update-alternatives --set java "/usr/lib/jvm/java-17-amazon-corretto/bin/java"
#      - run: sudo update-alternatives --set javac "/usr/lib/jvm/java-17-amazon-corretto/bin/javac"
#      - run: export JAVA_HOME=/usr/lib/jvm/java-17-amazon-corretto
#      - run: wget https://data.iana.org/time-zones/tzdb/version
#      - run: cat version